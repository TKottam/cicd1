# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  ######################################## SONARCLOUD ########################################

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  BuildandTest:
    name: Build and Test
    needs: sonarcloud
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  ######################################## DOCKER ########################################

  docker:
    runs-on: ubuntu-latest
    needs: BuildandTest

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cicd-kottam:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  ######################################## TERRAFORM - AWS ########################################

  dev:
    name: "Terraform dev"
    needs: docker
    runs-on: ubuntu-latest
    environment: dev

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Set Terraform Workspace
        run: terraform -chdir=terraform workspace new dev

      - name: Terraform Plan
        run: terraform -chdir=terraform plan

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve

  test:
    name: "Terraform test"
    runs-on: ubuntu-latest
    environment: test
    needs: dev

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Set Terraform Workspace
        run: terraform -chdir=terraform workspace new test

      - name: Terraform Plan
        run: terraform -chdir=terraform plan

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve

  prod:
    name: "Terraform prod"
    runs-on: ubuntu-latest
    environment: prod
    needs: test

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Set Terraform Workspace
        run: terraform -chdir=terraform workspace new prod

      - name: Terraform Plan
        run: terraform -chdir=terraform plan

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve
